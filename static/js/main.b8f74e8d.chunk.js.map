{"version":3,"sources":["context.jsx","components/Header.jsx","components/styles.jsx","components/utilities.jsx","components/LineChart.jsx","components/AreaChart.jsx","components/CaseChart.jsx","components/BarChart.jsx","components/ChartsArea.jsx","components/ChangeChartType.jsx","components/excludeList.jsx","components/Countries.jsx","components/Main.jsx","App.jsx","reportWebVitals.js","index.js","reducer.jsx"],"names":["StateContext","createContext","ContextProvider","reducer","initialState","children","Provider","value","useReducer","useStateContext","useContext","useStyles","makeStyles","theme","nav","display","alignItems","justifyContent","width","padding","borderBottom","palette","primary","dark","background","flexDirection","header__text","fontSize","fontWeight","darkMode__label","Header","darkMode","dispatch","classes","Box","component","className","Typography","variant","color","FormControlLabel","control","Switch","checked","onChange","type","payload","label","chartTheme","orange","pink","green","purple","tooltip","border","borderRadius","backgroundColor","sortData","data","chartData","sortedData","Object","keys","sort","a","b","i","length","dataPoint","date","number","push","tickFormat","tick","numeral","format","dateFormat","moment","Chart","country1","country2","showWorldWide","gridColor","ResponsiveContainer","height","LineChart","margin","top","right","left","bottom","CartesianGrid","stroke","strokeDasharray","vertical","XAxis","dataKey","fill","minTickGap","tickFormatter","YAxis","Tooltip","cursor","labelStyle","contentStyle","formatter","labelFormatter","Legend","iconSize","wrapperStyle","Line","dot","activeDot","r","strokeWidth","AreaChart","Area","stackId","chart","secondary","light","loading","placeItems","chart__area","textAlign","chart__title","name","casesChartType","loadColor","Card","CardContent","size","overviewChartType","useState","setData","worldData","setWorldData","country1Data","setCountry1Data","country2Data","setCountry2Data","fetchWorldwideData","fetch","response","json","Cases","casesPerOneMillion","Deaths","deathsPerOneMillion","Recovered","recoveredPerOneMillion","fetchCountryData","country","useEffect","list","Global","style","BarChart","Bar","charts__container","overflow","position","loading__container","transform","grid__item","minHeight","item__overview","ChartsArea","didMount","setDidMount","setLoading","casesData","setCasesData","deathsData","setDeathsData","worldCasesData","setWorldCasesData","country1CasesData","setCountry1CasesData","country2CasesData","setCountry2CasesData","worldDeathsData","setWorldDeathsData","country1DeathsData","setCountry1DeathsData","country2DeathsData","setCountry2DeathsData","ok","timeline","alert","updateCasesData","updateDeathsData","Grid","container","spacing","item","xs","lg","CaseChart","radio","marginLeft","radioGroup","marginTop","ChangeChartType","radioBtn","handleChange","FormControl","FormLabel","RadioGroup","aria-label","row","map","index","Radio","excludeList","main","formBox","formControl","marginBottom","maxWidth","select__countries","select__items","text","checkbox","box","link","textDecoration","Countries","countries","setCountries","setCountry1","setCountry2","exclude","filtered","filter","includes","countryInfo","iso2","getCountryList","handleChangeChartType","e","currentTarget","target","Checkbox","InputLabel","Select","MenuItem","href","rel","main__container","gridTemplateColumns","Main","default","App","createMuiTheme","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","state","action","casesType","overviewType","newCountry1","newCountry2","document","getElementById"],"mappings":"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","file":"static/js/main.b8f74e8d.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\n\nexport const StateContext = createContext();\n\nexport const ContextProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nexport const useStateContext = () => useContext(StateContext);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Box, Typography, FormControlLabel, Switch } from \"@material-ui/core\";\nimport { useStateContext } from \"../context\";\n\nconst useStyles = makeStyles((theme) => ({\n  nav: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    padding: \"1.2rem 2.3rem\",\n    // textAlign: \"center\",\n    borderBottom: `solid 0.1rem ${theme.palette.primary.dark} `,\n    background: theme.palette.primary.dark,\n    \"@media (max-width: 500px)\": {\n      flexDirection: \"column\",\n      padding: \"2rem 2rem 1rem 2.3rem\",\n      alignItems: \"flex-start\",\n    },\n  },\n  header__text: {\n    fontSize: \"2.6rem\",\n    fontWeight: 600,\n    \"@media (max-width: 800px)\": {\n      fontSize: \"2.2rem\",\n    },\n  },\n  darkMode__label: {\n    fontSize: \"1.5rem\",\n  },\n}));\n\nfunction Header() {\n  const [{ darkMode }, dispatch] = useStateContext();\n  const changeTheme = () => {\n    if (darkMode) {\n      dispatch({\n        type: \"CHANGE_THEME\",\n        payload: false,\n      });\n    } else {\n      dispatch({\n        type: \"CHANGE_THEME\",\n        payload: true,\n      });\n    }\n  };\n  const classes = useStyles();\n  return (\n    <Box component=\"nav\" className={classes.nav}>\n      <Typography\n        variant=\"h1\"\n        color=\"textSecondary\"\n        className={classes.header__text}\n      >\n        Covid-19 Comparator\n      </Typography>\n      <FormControlLabel\n        control={\n          <Switch color=\"secondary\" checked={darkMode} onChange={changeTheme} />\n        }\n        label={\n          <Typography variant=\"body1\" className={classes.darkMode__label}>\n            Dark Mode\n          </Typography>\n        }\n        color=\"primary\"\n      />\n    </Box>\n  );\n}\n\nexport default Header;\n","export const chartTheme = {\n  color: {\n    orange: \"#ec7554\",\n    pink: \"#cf477b\",\n    green: \"#229e6f\",\n    purple: \"#8884d8\",\n  },\n  tooltip: {\n    fontSize: \"14px\",\n    fontWeight: \"600\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    backgroundColor: \"rgba(28,29,29,0.8)\",\n  },\n};\n","import numeral from \"numeral\";\nimport moment from \"moment\";\nexport const sortData = (data) => {\n  let chartData = [];\n  const sortedData = Object.keys(data).sort(function (a, b) {\n    return data[a] - data[b];\n  });\n  for (let i = 0; i < sortedData.length; i++) {\n    let dataPoint = {\n      date: sortedData[i],\n      number: data[sortedData[i]],\n    };\n    chartData.push(dataPoint);\n  }\n  return chartData;\n};\n\nexport const tickFormat = (tick) => {\n  if (tick >= 1000) {\n    return numeral(tick).format(\"0.0a\");\n  } else {\n    return tick;\n  }\n};\n\nexport const dateFormat = (tick) => {\n  return moment(tick, \"M/D/YY\").format(\"D/M/YY\");\n};\n","import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { useStateContext } from \"../context\";\nimport numeral from \"numeral\";\nimport moment from \"moment\";\nimport { chartTheme } from \"./styles\";\nimport { tickFormat, dateFormat } from \"./utilities\";\n\nfunction Chart({ data }) {\n  const [\n    { country1, country2, showWorldWide, darkMode },\n    dispatch,\n  ] = useStateContext();\n  const color = darkMode ? \"#9ea0a8\" : \"#293853\";\n  const gridColor = darkMode ? \"#293853\" : \"#9ea0a8\";\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"90%\">\n      <LineChart\n        data={data}\n        margin={{\n          top: 10,\n          right: 25,\n          left: 5,\n          bottom: 10,\n        }}\n      >\n        <CartesianGrid\n          stroke={gridColor}\n          strokeDasharray=\"2 0\"\n          vertical={false}\n        />\n        <XAxis\n          dataKey=\"date\"\n          tick={{ fontSize: 13, fill: `${color}` }}\n          stroke={color}\n          minTickGap={40}\n          tickFormatter={(tick) => dateFormat(tick)}\n        />\n        <YAxis\n          tick={{ fontSize: 13, fill: `${color}` }}\n          tickFormatter={(tick) => tickFormat(tick)}\n          stroke={color}\n        />\n        <Tooltip\n          cursor={{ stroke: \"white\" }}\n          labelStyle={{ color: \"white\" }}\n          contentStyle={chartTheme.tooltip}\n          formatter={(value) => {\n            return numeral(value).format(\"0,0\");\n          }}\n          labelFormatter={(value) => {\n            return moment(value, \"M/D/YY\").format(\"MMM Do, YYYY\");\n          }}\n        />\n        <Legend\n          iconSize={20}\n          wrapperStyle={{ fontSize: \"15px\", fontWeight: \"500\" }}\n        />\n        {showWorldWide && (\n          <Line\n            dot={false}\n            type=\"monotone\"\n            dataKey=\"Global\"\n            stroke={chartTheme.color.purple}\n            activeDot={{ r: 5 }}\n            strokeWidth={3}\n          />\n        )}\n        {country1 && (\n          <Line\n            dot={false}\n            type=\"monotone\"\n            dataKey={country1}\n            stroke={chartTheme.color.orange}\n            activeDot={{ r: 5 }}\n            strokeWidth={3}\n          />\n        )}\n\n        {country2 && (\n          <Line\n            dot={false}\n            type=\"monotone\"\n            dataKey={country2}\n            stroke={chartTheme.color.pink}\n            activeDot={{ r: 5 }}\n            strokeWidth={3}\n          />\n        )}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n\nexport default Chart;\n","import React from \"react\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { useStateContext } from \"../context\";\nimport numeral from \"numeral\";\nimport moment from \"moment\";\nimport { chartTheme } from \"./styles\";\nimport { tickFormat, dateFormat } from \"./utilities\";\n\nfunction Chart({ data }) {\n  const [\n    { country1, country2, showWorldWide, darkMode },\n    dispatch,\n  ] = useStateContext();\n  const color = darkMode ? \"#9ea0a8\" : \"#293853\";\n  const gridColor = darkMode ? \"#293853\" : \"#9ea0a8\";\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"90%\">\n      <AreaChart\n        data={data}\n        margin={{\n          top: 10,\n          right: 25,\n          left: 5,\n          bottom: 10,\n        }}\n      >\n        <CartesianGrid\n          stroke={gridColor}\n          strokeDasharray=\"2 0\"\n          vertical={false}\n        />\n        <XAxis\n          dataKey=\"date\"\n          tick={{ fontSize: 13, fill: `${color}` }}\n          stroke={color}\n          minTickGap={40}\n          tickFormatter={(tick) => dateFormat(tick)}\n        />\n        <YAxis\n          tick={{ fontSize: 13, fill: `${color}` }}\n          tickFormatter={(tick) => tickFormat(tick)}\n          stroke={color}\n        />\n        <Tooltip\n          cursor={{ stroke: \"white\" }}\n          labelStyle={{ color: \"white\" }}\n          contentStyle={chartTheme.tooltip}\n          formatter={(value) => {\n            return numeral(value).format(\"0,0\");\n          }}\n          labelFormatter={(value) => {\n            return moment(value, \"M/D/YY\").format(\"MMM Do, YYYY\");\n          }}\n        />\n        <Legend\n          iconSize={20}\n          wrapperStyle={{ fontSize: \"15px\", fontWeight: \"500\" }}\n        />\n        {showWorldWide && (\n          <Area\n            dot={false}\n            type=\"monotone\"\n            dataKey=\"Global\"\n            stroke={chartTheme.color.purple}\n            fill={chartTheme.color.purple}\n            activeDot={{ r: 5 }}\n            strokeWidth={3}\n            stackId=\"1\"\n          />\n        )}\n        {country1 && (\n          <Area\n            dot={false}\n            type=\"monotone\"\n            dataKey={country1}\n            stroke={chartTheme.color.orange}\n            fill={chartTheme.color.orange}\n            activeDot={{ r: 5 }}\n            strokeWidth={3}\n            stackId=\"1\"\n          />\n        )}\n\n        {country2 && (\n          <Area\n            dot={false}\n            type=\"monotone\"\n            dataKey={country2}\n            stroke={chartTheme.color.pink}\n            fill={chartTheme.color.pink}\n            activeDot={{ r: 5 }}\n            strokeWidth={3}\n            stackId=\"1\"\n          />\n        )}\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n}\n\nexport default Chart;\n","import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useStateContext } from \"../context\";\nimport { RingLoader } from \"react-spinners\";\nimport LineChart from \"./LineChart\";\nimport AreaChart from \"./AreaChart\";\n\nconst useStyles = makeStyles((theme) => ({\n  chart: {\n    width: \"100%\",\n    height: \"100%\",\n    background: theme.palette.secondary.light,\n  },\n  loading: {\n    width: \"100%\",\n    height: \"100%\",\n    background: theme.palette.secondary.light,\n    display: \"grid\",\n    placeItems: \"center\",\n  },\n  chart__area: {\n    width: \"100%\",\n    height: \"100%\",\n    textAlign: \"center\",\n  },\n  chart__title: {\n    width: \"100%\",\n    height: \"10%\",\n  },\n}));\n\nfunction Chart({ data, name }) {\n  const classes = useStyles();\n  const [\n    { country1, country2, showWorldWide, darkMode, casesChartType },\n    dispatch,\n  ] = useStateContext();\n  const loadColor = darkMode ? \"#ffffff\" : \"#293853\";\n\n  if (country1 || country2 || showWorldWide) {\n    return (\n      <Card className={classes.chart}>\n        <CardContent className={classes.chart__area}>\n          <Typography variant=\"h4\" className={classes.chart__title}>\n            {name}\n          </Typography>\n          {casesChartType === \"Line chart\" ? (\n            <LineChart data={data} />\n          ) : (\n            <AreaChart data={data} />\n          )}\n        </CardContent>\n      </Card>\n    );\n  } else {\n    return (\n      <Card className={classes.loading}>\n        <RingLoader size={55} color={loadColor} />\n      </Card>\n    );\n  }\n}\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { chartTheme } from \"./styles\";\nimport { useStateContext } from \"../context\";\nimport numeral from \"numeral\";\nimport { RingLoader } from \"react-spinners\";\nimport { tickFormat } from \"./utilities\";\n\nconst useStyles = makeStyles((theme) => ({\n  chart: {\n    width: \"100%\",\n    height: \"100%\",\n    background: theme.palette.secondary.light,\n  },\n  loading: {\n    width: \"100%\",\n    height: \"100%\",\n    background: theme.palette.secondary.light,\n    display: \"grid\",\n    placeItems: \"center\",\n  },\n  chart__area: {\n    width: \"100%\",\n    height: \"100%\",\n    textAlign: \"center\",\n  },\n  chart__title: {\n    width: \"100%\",\n    height: \"10%\",\n  },\n}));\n\nfunction Chart() {\n  const classes = useStyles();\n  const [\n    { country1, country2, showWorldWide, darkMode, overviewChartType },\n    dispatch,\n  ] = useStateContext();\n  const color = darkMode ? \"#9ea0a8\" : \"#293853\";\n  const gridColor = darkMode ? \"#293853\" : \"#9ea0a8\";\n  const loadColor = darkMode ? \"#ffffff\" : \"#293853\";\n  const [data, setData] = useState([]);\n  const [worldData, setWorldData] = useState({});\n  const [country1Data, setCountry1Data] = useState({});\n  const [country2Data, setCountry2Data] = useState({});\n\n  const fetchWorldwideData = async () => {\n    const response = await fetch(\"https://disease.sh/v3/covid-19/all\");\n    const data = await response.json();\n    const chartData = {\n      name: \"Global\",\n      Cases: data.casesPerOneMillion,\n      Deaths: data.deathsPerOneMillion,\n      Recovered: data.recoveredPerOneMillion,\n    };\n    setWorldData(chartData);\n  };\n  const fetchCountryData = async (country) => {\n    const response = await fetch(\n      `https://disease.sh/v3/covid-19/countries/${country}`\n    );\n    const data = await response.json();\n    const chartData = {\n      name: data.country,\n      Cases: data.casesPerOneMillion,\n      Deaths: data.deathsPerOneMillion,\n      Recovered: data.recoveredPerOneMillion,\n    };\n    country === country1\n      ? setCountry1Data(chartData)\n      : setCountry2Data(chartData);\n  };\n\n  useEffect(() => {\n    fetchWorldwideData();\n  }, []);\n\n  useEffect(() => {\n    country1 && fetchCountryData(country1);\n    country2 && fetchCountryData(country2);\n  }, [country1, country2]);\n\n  useEffect(() => {\n    const chartData = () => {\n      let data = [];\n      const list = [\"Cases\", \"Deaths\", \"Recovered\"];\n      for (let i = 0; i < list.length; i++) {\n        data[i] = new Object();\n        data[i].name = list[i];\n        data[i].Global = showWorldWide ? worldData[list[i]] : null;\n        data[i][country1] = country1Data ? country1Data[list[i]] : null;\n        data[i][country2] = country2Data ? country2Data[list[i]] : null;\n      }\n      setData(data);\n    };\n\n    chartData();\n  }, [worldData, country1Data, country2Data, showWorldWide]);\n\n  if (country1 || country2 || showWorldWide) {\n    return (\n      <Card className={classes.chart}>\n        <CardContent className={classes.chart__area}>\n          <Typography variant=\"h4\" className={classes.chart__title}>\n            Overview <br />\n            <Typography variant=\"body1\" style={{ fontSize: \"14px\" }}>\n              (per one million)\n            </Typography>\n          </Typography>\n          <ResponsiveContainer width=\"100%\" height=\"90%\">\n            <BarChart\n              data={data}\n              margin={{\n                top: 15,\n                right: 20,\n                left: 5,\n                bottom: 10,\n              }}\n            >\n              <CartesianGrid\n                stroke={gridColor}\n                strokeDasharray=\"2 0\"\n                vertical={false}\n              />\n              <XAxis\n                dataKey=\"name\"\n                tick={{ fontSize: 13, fill: `${color}` }}\n                stroke={color}\n              />\n              <YAxis\n                tickFormatter={(tick) => tickFormat(tick)}\n                tick={{ fontSize: 13, fill: `${color}` }}\n                stroke={color}\n              />\n              <Tooltip\n                cursor={{ fill: \"rgba(86, 109, 153, 0.6)\" }}\n                labelStyle={{ color: \"white\" }}\n                contentStyle={chartTheme.tooltip}\n                formatter={(value) => {\n                  if (value >= 1000) {\n                    return numeral(value).format(\"0,0\");\n                  } else {\n                    return value;\n                  }\n                }}\n                labelFormatter={(value) => {\n                  return value + \" /1M pop\";\n                }}\n              />\n              <Legend\n                iconSize={20}\n                wrapperStyle={{ fontSize: \"15px\", fontWeight: \"500\" }}\n              />\n              {showWorldWide && (\n                <Bar\n                  dataKey=\"Global\"\n                  stackId={overviewChartType === \"Stacked Bar\" && \"a\"}\n                  fill={chartTheme.color.purple}\n                />\n              )}\n\n              {country1 && (\n                <Bar\n                  dataKey={country1}\n                  stackId={overviewChartType === \"Stacked Bar\" && \"a\"}\n                  fill={chartTheme.color.orange}\n                />\n              )}\n              {country2 && (\n                <Bar\n                  dataKey={country2}\n                  stackId={overviewChartType === \"Stacked Bar\" && \"a\"}\n                  fill={chartTheme.color.pink}\n                />\n              )}\n            </BarChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n    );\n  } else {\n    return (\n      <Card className={classes.loading}>\n        <RingLoader size={55} color={loadColor} />\n      </Card>\n    );\n  }\n}\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { Box, Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CaseChart from \"./CaseChart\";\nimport BarChart from \"./BarChart\";\nimport { useStateContext } from \"../context\";\nimport { sortData } from \"./utilities\";\nimport { PacmanLoader } from \"react-spinners\";\n\nconst useStyles = makeStyles((theme) => ({\n  charts__container: {\n    padding: \"5%\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    width: \"100%\",\n  },\n\n  loading__container: {\n    position: \"absolute\",\n    top: \"20%\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    width: \"120px\",\n    height: \"50px\",\n  },\n  grid__item: {\n    width: \"100%\",\n    minHeight: \"40rem\",\n    height: \"40vh\",\n  },\n  item__overview: {\n    width: \"100%\",\n    minHeight: \"70rem\",\n    height: \"70vh\",\n  },\n}));\n\nfunction ChartsArea() {\n  const classes = useStyles();\n  const [didMount, setDidMount] = useState(false);\n  const [loading, setLoading] = useState(true);\n  // chart data\n  const [casesData, setCasesData] = useState([]);\n  const [deathsData, setDeathsData] = useState([]);\n  // cases data\n  const [worldCasesData, setWorldCasesData] = useState([]);\n  const [country1CasesData, setCountry1CasesData] = useState([]);\n  const [country2CasesData, setCountry2CasesData] = useState([]);\n  // deaths data\n  const [worldDeathsData, setWorldDeathsData] = useState([]);\n  const [country1DeathsData, setCountry1DeathsData] = useState([]);\n  const [country2DeathsData, setCountry2DeathsData] = useState([]);\n\n  const [\n    { country1, country2, showWorldWide, darkMode },\n    dispatch,\n  ] = useStateContext();\n  const loadColor = darkMode ? \"#ffffff\" : \"#293853\";\n\n  const fetchCountryData = async (country, type) => {\n    const response = await fetch(\n      `https://disease.sh/v3/covid-19/historical/${country}?lastdays=all`\n    );\n    const data = await response.json();\n    if (response.ok) {\n      const sortedData = sortData(data.timeline[type]);\n      if (type === \"cases\") {\n        country == country1\n          ? setCountry1CasesData(sortedData)\n          : setCountry2CasesData(sortedData);\n      } else {\n        country == country1\n          ? setCountry1DeathsData(sortedData)\n          : setCountry2DeathsData(sortedData);\n      }\n    } else {\n      if (country == country1) {\n        setCountry1CasesData([]);\n        setCountry1DeathsData([]);\n        dispatch({\n          type: \"SET_COUNTRY\",\n          payload: {\n            country: \"country1\",\n            name: \"\",\n          },\n        });\n      } else {\n        setCountry2CasesData([]);\n        setCountry2DeathsData([]);\n        dispatch({\n          type: \"SET_COUNTRY\",\n          payload: {\n            country: \"country2\",\n            name: \"\",\n          },\n        });\n      }\n      alert(\"There's no data for this country. Please choose another one.\");\n    }\n  };\n\n  const fetchWorldwideData = async (type) => {\n    const response = await fetch(\n      \"https://disease.sh/v3/covid-19/historical/all?lastdays=all\"\n    );\n    const data = await response.json();\n    const sortedData = sortData(data[type]);\n    type === \"cases\"\n      ? setWorldCasesData(sortedData)\n      : setWorldDeathsData(sortedData);\n  };\n\n  // initial fetch worldwide data\n  useEffect(() => {\n    fetchWorldwideData(\"cases\");\n    fetchWorldwideData(\"deaths\");\n    setDidMount(true);\n  }, []);\n\n  // render whenever user changes country\n  useEffect(() => {\n    if (didMount) {\n      country1 && fetchCountryData(country1, \"cases\");\n      country1 && fetchCountryData(country1, \"deaths\");\n      country2 && fetchCountryData(country2, \"cases\");\n      country2 && fetchCountryData(country2, \"deaths\");\n    }\n  }, [country1, country2]);\n\n  // update new data when changes countries\n  useEffect(() => {\n    const updateCasesData = () => {\n      let chartData = [];\n      for (let i = 0; i < worldCasesData.length; i++) {\n        chartData[i] = new Object();\n        chartData[i].date = worldCasesData[i].date;\n        chartData[i].Global = showWorldWide ? worldCasesData[i].number : null;\n        chartData[i][country1] =\n          country1CasesData.length > 0 ? country1CasesData[i].number : null;\n        chartData[i][country2] =\n          country2CasesData.length > 0 ? country2CasesData[i].number : null;\n      }\n      setCasesData(chartData);\n    };\n\n    const updateDeathsData = () => {\n      let chartData = [];\n      for (let i = 0; i < worldDeathsData.length; i++) {\n        chartData[i] = new Object();\n        chartData[i].date = worldDeathsData[i].date;\n        chartData[i].Global = showWorldWide ? worldDeathsData[i].number : null;\n        chartData[i][country1] =\n          country1DeathsData.length > 0 ? country1DeathsData[i].number : null;\n        chartData[i][country2] =\n          country2DeathsData.length > 0 ? country2DeathsData[i].number : null;\n      }\n      setDeathsData(chartData);\n    };\n\n    updateCasesData();\n    updateDeathsData();\n    return () => {\n      setLoading(false);\n    };\n  }, [\n    worldCasesData,\n    worldDeathsData,\n    country1CasesData,\n    country1DeathsData,\n    country2CasesData,\n    country2DeathsData,\n    showWorldWide,\n  ]);\n\n  return (\n    <Box className={classes.charts__container}>\n      {loading && (\n        <Box className={classes.loading__container}>\n          <PacmanLoader color={loadColor} />\n        </Box>\n      )}\n      {!loading && (\n        <Grid container spacing={6}>\n          <Grid item xs={12} lg={6} className={classes.grid__item}>\n            <CaseChart data={casesData} name=\"Total Cases\" />\n          </Grid>\n          <Grid item xs={12} lg={6} className={classes.grid__item}>\n            <CaseChart data={deathsData} name=\"Total Deaths\" />\n          </Grid>\n          <Grid item xs={12} className={classes.item__overview}>\n            <BarChart />\n          </Grid>\n        </Grid>\n      )}\n    </Box>\n  );\n}\n\nexport default ChartsArea;\n","import React from \"react\";\nimport \"../App.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  FormControl,\n  Typography,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  FormLabel,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  radio: {\n    transform: \"scale(1.2)\",\n    marginLeft: \"0.2rem\",\n  },\n  radioGroup: {\n    marginTop: \"0.8rem\",\n  },\n}));\n\nfunction ChangeChartType({ label, value, radioBtn, handleChange }) {\n  const classes = useStyles();\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">\n        <Typography variant=\"h4\" color=\"textSecondary\">\n          {label}\n        </Typography>\n      </FormLabel>\n      <RadioGroup\n        aria-label={label}\n        name={label}\n        value={value}\n        row\n        onChange={handleChange}\n        className={classes.radioGroup}\n      >\n        {radioBtn.map((radio, index) => (\n          <FormControlLabel\n            value={radio}\n            control={<Radio className={classes.radio} />}\n            label={radio}\n            key={index}\n          />\n        ))}\n      </RadioGroup>\n    </FormControl>\n  );\n}\n\nexport default ChangeChartType;\n","// these countries dont have daily data\nexport const excludeList = [\n  \"Anguilla\",\n  \"Aruba\",\n  \"Bermuda\",\n  \"British Virgin Islands\",\n  \"Caribbean Netherlands\",\n  \"Cayman Islands\",\n  \"Channel Islands\",\n  \"Curaçao\",\n  \"Diamond Princess\",\n  \"Falkland Islands (Malvinas)\",\n  \"Faroe Islands\",\n  \"French Guiana\",\n  \"French Polynesia\",\n  \"Gibraltar\",\n  \"Greenland\",\n  \"Guadeloupe\",\n  \"Holy See (Vatican City State)\",\n  \"Hong Kong\",\n  \"Isle of Man\",\n  \"MS Zaandam\",\n  \"Macao\",\n  \"Martinique\",\n  \"Mayotte\",\n  \"Montserrat\",\n  \"Myanmar\",\n  \"New Caledonia\",\n  \"Palestine\",\n  \"Réunion\",\n  \"Saint Martin\",\n  \"Saint Pierre Miquelon\",\n  \"Sint Maarten\",\n  \"St. Barth\",\n  \"Turks and Caicos Islands\",\n  \"Wallis and Futuna\",\n  \"Western Sahara\",\n];\n","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Box,\n  MenuItem,\n  FormControl,\n  Select,\n  InputLabel,\n  Typography,\n  FormControlLabel,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { useStateContext } from \"../context\";\nimport ChangeChartType from \"./ChangeChartType\";\nimport { excludeList } from \"./excludeList\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    width: \"35rem\",\n    background: theme.palette.primary.main,\n    minHeight: \"100vh\",\n    height: \"100%\",\n    \"@media (max-width: 800px)\": {\n      width: \"100%\",\n      height: \"fit-content\",\n      minHeight: \"30rem\",\n    },\n  },\n  formBox: {\n    marginTop: \"0.5rem\",\n  },\n  formControl: {\n    marginBottom: \"1.2rem\",\n    width: \"85%\",\n    maxWidth: \"40rem\",\n  },\n  select__countries: {\n    background: theme.palette.secondary.light,\n    height: \"4rem\",\n    fontSize: \"1.6rem\",\n  },\n  select__items: {\n    color: theme.palette.text.secondary,\n    fontSize: \"1.5rem\",\n  },\n  checkbox: {\n    color: theme.palette.text.primary,\n    transform: \"scale(1.4)\",\n    marginLeft: \"0.4rem\",\n  },\n  box: {\n    width: \"100%\",\n    borderBottom: `0.1rem solid ${theme.palette.primary.light}`,\n    padding: \"2.2rem 2.3rem 1.8rem\",\n  },\n  link: {\n    textDecoration: \"none\",\n    color: theme.palette.text.primary,\n  },\n}));\n\nfunction Countries() {\n  const [\n    { casesChartType, overviewChartType, showWorldWide },\n    dispatch,\n  ] = useStateContext();\n  const [countries, setCountries] = useState([]);\n  const [country1, setCountry1] = useState(\"\");\n  const [country2, setCountry2] = useState(\"\");\n  const exclude = excludeList;\n\n  // get list of all countries for the dropdown\n  useEffect(() => {\n    const getCountryList = async () => {\n      const response = await fetch(\"https://disease.sh/v3/covid-19/countries\");\n      const data = await response.json();\n      const filtered = data.filter(\n        (country) => !exclude.includes(country.country)\n      );\n      const countries = filtered.map((country) => ({\n        name: country.country,\n        value: country.countryInfo.iso2,\n      }));\n      setCountries(countries);\n    };\n    getCountryList();\n  }, []);\n\n  const changeCountry1 = (e) => {\n    const value = e.target.value;\n    if (value !== country2) {\n      setCountry1(value);\n      dispatch({\n        type: \"SET_COUNTRY\",\n        payload: {\n          country: \"country1\",\n          name: value,\n        },\n      });\n    } else {\n      alert(\n        \"This country is already on the chart. Please choose a different one!\"\n      );\n    }\n  };\n  const changeCountry2 = (e) => {\n    const value = e.target.value;\n    if (value !== country1) {\n      setCountry2(value);\n      dispatch({\n        type: \"SET_COUNTRY\",\n        payload: {\n          country: \"country2\",\n          name: value,\n        },\n      });\n    } else {\n      alert(\n        \"This country is already on the chart. Please choose a different one!\"\n      );\n    }\n  };\n\n  const showWorld = (e) => {\n    dispatch({\n      type: \"SHOW_WORLDWIDE\",\n      payload: e.target.checked,\n    });\n  };\n\n  const handleChangeChartType = (e) => {\n    dispatch({\n      type: \"CHART_TYPE\",\n      payload: {\n        chart: e.currentTarget.name,\n        type: e.target.value,\n      },\n    });\n  };\n\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.container}>\n      <Box className={classes.box}>\n        <Typography variant=\"h4\" color=\"textSecondary\">\n          Select Countries\n        </Typography>\n        <FormControlLabel\n          control={\n            <Checkbox\n              className={classes.checkbox}\n              color=\"secondary\"\n              onChange={showWorld}\n              name=\"worldwide\"\n              checked={showWorldWide}\n            />\n          }\n          label={\n            <Typography variant=\"h5\" color=\"textPrimary\">\n              Worldwide Data\n            </Typography>\n          }\n          style={{ marginTop: \"1.3rem\", marginBottom: \"0.6rem\" }}\n        />\n        <Box className={classes.formBox}>\n          <FormControl className={classes.formControl}>\n            <InputLabel>\n              <Typography variant=\"h5\" color=\"textPrimary\">\n                Country 1\n              </Typography>\n            </InputLabel>\n            <Select\n              value={country1}\n              onChange={changeCountry1}\n              className={classes.select__countries}\n              color=\"secondary\"\n            >\n              {countries.map((country, index) => (\n                <MenuItem\n                  key={index}\n                  className={classes.select__items}\n                  value={country.value}\n                >\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <InputLabel>\n              <Typography variant=\"h5\" color=\"textPrimary\">\n                Country 2\n              </Typography>\n            </InputLabel>\n            <Select\n              value={country2}\n              onChange={changeCountry2}\n              className={classes.select__countries}\n              color=\"secondary\"\n            >\n              {countries.map((country, index) => (\n                <MenuItem\n                  key={index}\n                  className={classes.select__items}\n                  value={country.value}\n                >\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <Typography\n            variant=\"body1\"\n            style={{ fontSize: \"12px\", marginTop: \"0.5rem\" }}\n          >\n            Countries/ territories without daily updated data have been excluded\n            from this list. <br />\n            Data source: &nbsp;\n            <a\n              href=\"https://disease.sh/\"\n              rel=\"noreferrer\"\n              target=\"_blank\"\n              className={classes.link}\n            >\n              disease.sh\n            </a>\n          </Typography>\n        </Box>\n      </Box>\n      <Box className={classes.box}>\n        <ChangeChartType\n          label=\"Cases Charts\"\n          value={casesChartType}\n          radioBtn={[\"Line chart\", \"Area chart\"]}\n          handleChange={handleChangeChartType}\n        />\n      </Box>\n      <Box className={classes.box}>\n        <ChangeChartType\n          label=\"Overview Chart\"\n          value={overviewChartType}\n          radioBtn={[\"Bar chart\", \"Stacked Bar\"]}\n          handleChange={handleChangeChartType}\n        />\n      </Box>\n    </Box>\n  );\n}\n\nexport default Countries;\n","import React from \"react\";\nimport \"../App.css\";\nimport ChartsArea from \"./ChartsArea\";\nimport Countries from \"./Countries\";\nimport { Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  main__container: {\n    width: \"100%\",\n    display: \"grid\",\n    gridTemplateColumns: \"35rem 1fr\",\n    \"@media (max-width: 800px)\": {\n      gridTemplateColumns: \"1fr\",\n    },\n  },\n}));\n\nfunction Main() {\n  const classes = useStyles();\n  return (\n    <Box className={classes.main__container}>\n      <Countries></Countries>\n      <ChartsArea></ChartsArea>\n    </Box>\n  );\n}\n\nexport default Main;\n","import \"./App.css\";\nimport React from \"react\";\nimport { useStateContext } from \"./context\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\n\nconst light = {\n  palette: {\n    primary: {\n      main: \"#CBCCD1\",\n      light: \"#9fa3af\",\n      dark: \"#babdc5\",\n    },\n    secondary: {\n      main: \"#9d7bee\",\n      light: \"rgba(120, 133, 168, 0.1)\",\n    },\n    background: {\n      default: \"#D4D5D8\",\n    },\n    text: {\n      primary: \"#2d3d5e\",\n      secondary: \"#262c38\",\n    },\n  },\n};\nconst dark = {\n  palette: {\n    primary: {\n      main: \"#213141\",\n      light: \"#2f557c\",\n      dark: \"#172736\",\n    },\n    secondary: {\n      main: \"#9d7bee\",\n      light: \"rgba(89,115,135, 0.2)\",\n    },\n    background: {\n      default: \"#283c50\",\n    },\n    text: {\n      primary: \"#fcfcfc\",\n      secondary: \"#578fb1\",\n    },\n  },\n};\n\nfunction App() {\n  const [{ darkMode }, dispatch] = useStateContext();\n  const theme = createMuiTheme(darkMode ? dark : light);\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Header />\n      <Main />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ContextProvider } from \"./context\";\nimport { initialState, reducer } from \"./reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContextProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </ContextProvider>{\" \"}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const initialState = {\n  darkMode: true,\n  country1: \"\",\n  country2: \"\",\n  showWorldWide: true,\n  casesChartType: \"Line chart\",\n  overviewChartType: \"Bar chart\",\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE_THEME\":\n      return {\n        ...state,\n        darkMode: action.payload,\n      };\n    case \"SHOW_WORLDWIDE\":\n      return {\n        ...state,\n        showWorldWide: action.payload,\n      };\n    case \"CHART_TYPE\": {\n      let casesType = state.casesChartType;\n      let overviewType = state.overviewChartType;\n\n      if (action.payload.chart == \"Cases Charts\") {\n        casesType = action.payload.type;\n      }\n\n      if (action.payload.chart == \"Overview Chart\") {\n        overviewType = action.payload.type;\n      }\n\n      return {\n        ...state,\n        casesChartType: casesType,\n        overviewChartType: overviewType,\n      };\n    }\n\n    case \"SET_COUNTRY\": {\n      let newCountry1 = state.country1;\n      let newCountry2 = state.country2;\n      if (action.payload.country === \"country1\") {\n        newCountry1 = action.payload.name;\n      } else {\n        newCountry2 = action.payload.name;\n      }\n      return {\n        ...state,\n        country1: newCountry1,\n        country2: newCountry2,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n"],"sourceRoot":""}